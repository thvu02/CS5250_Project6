// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean color;
    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;   // black true; white false
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            let screen[i] = false;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, mask;
        let addr = (y * 32) + (x / 16);
        let mask = Math.helper(x & 15);

        if (color) {
            let screen[addr] = screen[addr] | mask;
        }
        else {
            let screen[addr] = screen[addr] & ~mask;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, temp;

        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dy = 0) {
            do Screen.drawHorizontalLine(x1, x2, y1);
        }
        else {
            if (dx = 0) {
                do Screen.drawVerticalLine(x1, y1, y2);
            }
            else {
                do Screen.drawDiagonalLine(x1, y1, x2, y2, dx, dy);
            }
        }
        return;
    }

    function void drawDiagonalLine(int x1, int y1, int x2, int y2, int dx, int dy) {
        var int a, b, adyMinusbdx, y_incr;
        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;

        if (dy < 0) {
            let y_incr = -1;
        }
        else {
            let y_incr = 1;
        }

        while (~(a > dx) & (((y_incr = 1) & ~(b > dy)) | ((y_incr = -1) & ~(b < dy)))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (adyMinusbdx < 0) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + (dy * y_incr);
            }
            else {
                let b = b + y_incr;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        var int temp;

        if (y1 > y2) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        while (~(y1 > y2)) {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    function void drawHelper(int x1, int x2, int y) {
        while (~(x1 > x2)) {
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int x1mod16, x2mod16, addrS, addrE;
        let x1mod16 = x1 & 15;
        let x2mod16 = x2 & 15;
        let addrS = (y * 32) + (x1 / 16);
        let addrE = (y * 32) + (x2 / 16) + (x2mod16=0);

        if (addrS = addrE) {
            do Screen.drawHelper(x1, x2, y);
        }
        else {
            if (~(x1mod16 = 0)) {
                let addrS = addrS + 1;
                do Screen.drawHelper(x1, x1 + 16 - x1mod16, y);
            }
            if (~(x2mod16 = 0)) {
                let addrE = addrE - 1;
                do Screen.drawHelper(x2 - x2mod16, x2, y);
            }
            while (~(addrS > addrE)) {
                let screen[addrS] = color;
                let addrS = addrS + 1;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int temp;
        let temp = y1;
        while (~(temp > y2)) {
            do Screen.drawHorizontalLine(x1, x2, temp);
            let temp = temp + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy, r_squared;
        let r_squared = r * r;
        let dy = -r;

        while (~(dy > r)) {
            let dx = Math.sqrt(r_squared - (dy * dy));
            do Screen.drawHorizontalLine(x - dx, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}