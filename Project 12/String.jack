// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int len, maxlen;
    field Array characters;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let len = 0;
        let maxlen = maxLength;
        let characters = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do characters.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return characters[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let characters[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len < maxlen) {
            let characters[len] = c;
            let len = len + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0) {
            let len = len - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int intval, index;
        var boolean negative;
        let intval = 0;

        if ((len > 0) & (characters[0] = 45)) {
            let negative = true;
            let index = 1;
        }
        else {
            let negative = false;
            let index = 0;
        }

        while ((index < len) & String.isDigit(characters[index])) {

            let intval = (intval * 10) + String.charToInt(characters[index]);
            let index = index + 1;
        }

        if (negative) {
            return -intval;
        }
        else {
            return intval;
        }
    }

    /** check if digit or not */
    function boolean isDigit(char c) {
        return ~(c < 48) & ~(c > 57);
    }

    /** convert from char to int */
    function int charToInt(char c) {
        return c - 48;
    }

    /** convert from int to char */
    function char intToChar(int val) {
        return val + 48;
    }

    /** helper for setInt() */
    method void helper(int val) {
        var int nextVal;

        if (val < 10) {
            do appendChar(String.intToChar(val));
        }
        else {
            let nextVal = val / 10;
            do helper(nextVal);
            do appendChar(String.intToChar(val - (nextVal * 10)));
        }
        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len = 0;

        if (val < 0) {
            let val = -val;
            do appendChar(45);
        }
        do helper(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
